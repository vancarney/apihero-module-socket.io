// Generated by CoffeeScript 1.9.3
var ApiHero, Backbone,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

if (typeof window === "undefined" || window === null) {
  Backbone = require('backbone');
  ApiHero = {
    WebSock: {}
  };
}

ApiHero.WebSock.StreamModel = (function(superClass) {
  extend(StreamModel, superClass);

  function StreamModel() {
    return StreamModel.__super__.constructor.apply(this, arguments);
  }

  StreamModel.prototype.header = {};

  StreamModel.prototype.initialize = function(attributes, options) {
    var getFunctionName;
    getFunctionName = function(fun) {
      var n;
      if ((n = fun.toString().match(/function+\s{1,}([a-zA-Z]{1,}[_0-9a-zA-Z]?)/)) != null) {
        return n[1];
      } else {
        return null;
      }
    };
    this.__type = ((function(_this) {
      return function(fun) {
        var name;
        return fun.constructor.name || ((name = getFunctionName(fun.constructor)) != null ? name : '__UNDEFINED_CLASSNAME__');
      };
    })(this))(this);
    return StreamModel.__super__.initialize.call(this, attributes, options);
  };

  StreamModel.prototype.sync = function(mtd, mdl, opt) {
    var base, m;
    if (opt == null) {
      opt = {};
    }
    m = {};
    if (opt.header != null) {
      _.extend(this.header, opt.header);
    }
    if (mtd === 'create') {
      if ((base = this.header).type == null) {
        base.type = this.__type;
      }
      m.header = _.extend(this.header, {
        sntTime: Date.now()
      });
      m.body = mdl.attributes;
      return StreamModel.__connection__.socket.emit('ws:datagram', m);
    }
  };

  StreamModel.prototype.getSenderId = function() {
    return this.header.sender_id || null;
  };

  StreamModel.prototype.getSentTime = function() {
    return this.header.sntTime || null;
  };

  StreamModel.prototype.getServedTime = function() {
    return this.header.srvTime || null;
  };

  StreamModel.prototype.getRecievedTime = function() {
    return this.header.rcvTime || null;
  };

  StreamModel.prototype.getSize = function() {
    return this.header.size || null;
  };

  StreamModel.prototype.setRoomId = function(id) {
    return this.header.room_id = id;
  };

  StreamModel.prototype.getRoomId = function() {
    return this.header.room_id;
  };

  StreamModel.prototype.parse = function(data) {
    this.header = Object.freeze(data.header);
    return StreamModel.__super__.parse.call(data.body);
  };

  return StreamModel;

})(Backbone.Model);

if (typeof window === "undefined" || window === null) {
  module.exports = ApiHero.WebSock.StreamModel;
}
