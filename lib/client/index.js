// Generated by CoffeeScript 1.9.3
var ApiHero, Backbone, SockData, connection;

if (typeof window === "undefined" || window === null) {
  Backbone = require('backbone');
  SockData = require('./models/stream-model');
  ApiHero = {
    WebSock: {}
  };
  connection = require('./connection');
}

ApiHero.WebSock.Client = (function() {
  Client.prototype.__streamHandlers = {};

  function Client(__addr, __options) {
    var base;
    this.__addr = __addr;
    this.__options = __options != null ? __options : {};
    _.extend(this, Backbone.Events);
    if ((base = this.__options).url == null) {
      base.url = this.__addr;
    }
    this.model = ApiHero.WebSock.StreamModel;
    if (!((this.__options.auto_connect != null) && this.__options.auto_connect === false)) {
      this.connect();
    }
  }

  Client.prototype.connect = function() {
    this.__conn = new (connection != null ? connection : ApiHero.WebSock.SocketIOConnection)(this, this.__options);
    return this;
  };

  Client.prototype.addStream = function(name, clazz) {
    var s;
    if ((s = this.__streamHandlers[name]) != null) {
      return s;
    }
    this.__streamHandlers[name] = clazz;
    return this;
  };

  Client.prototype.removeStream = function(name) {
    if (this.__streamHandlers[name] == null) {
      return null;
    }
    delete this.__streamHandlers[name];
    return this;
  };

  Client.prototype.getClientId = function() {
    var ref, ref1;
    if (((ref = this.socket) != null ? (ref1 = ref.io) != null ? ref1.engine : void 0 : void 0) == null) {
      return null;
    }
    return this.socket.io.engine.id;
  };

  Client.prototype.getSocket = function() {
    return this.__conn.getSocket();
  };

  Client.prototype.emit = function(name, message) {
    return this.__conn.emit(name, message);
  };

  return Client;

})();

if (typeof window === "undefined" || window === null) {
  module.exports = ApiHero.WebSock.Client;
}
