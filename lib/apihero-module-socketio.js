// Generated by CoffeeScript 1.9.3
var EventEmitter, WebSock, _, _io, _listeners, addListeners, connection, connectionHandler, emitter, io, io_redis;

EventEmitter = require('events').EventEmitter;

io_redis = require('socket.io-redis');

_io = require('socket.io');

io = null;

_listeners = {};

_ = require('lodash')._;

connection = require('./client/connection');

emitter = new EventEmitter;

WebSock = {};

WebSock.StreamModel = require('./client/models/stream-model');

WebSock.StreamCollection = require('./client/models/stream-collection');

WebSock.Client = require('./client');

module.exports.WebSock = WebSock;

connectionHandler = (function(_this) {
  return function(client) {
    var l, listener;
    for (listener in _listeners) {
      if ((client._events != null) && ((l = client._events[listener]) != null) && typeof l === 'function') {
        client.removeListener(listener, l);
      }
      client.on(listener, _listeners[listener]);
    }
    emitter.emit('connect', client);
    return client.on('disconnect', function() {
      return emitter.emit('disconnect', client);
    });
  };
})(this);

module.exports.addListeners = addListeners = (function(_this) {
  return function(listeners) {
    var type;
    if ((type = typeof listeners) !== 'object') {
      throw "listeners required to be type 'object' type was <" + type + ">";
    }
    _listeners = listeners;
    return module.exports;
  };
})(this);

module.exports.getIO = (function(_this) {
  return function() {
    return io;
  };
})(this);

module.exports.on = (function(_this) {
  return function() {
    emitter.addListener.apply(emitter, arguments);
    return module.exports;
  };
})(this);

module.exports.off = (function(_this) {
  return function() {
    emitter.removeListener.apply(emitter, arguments);
    return module.exports;
  };
})(this);

module.exports.init = (function(_this) {
  return function(app, options, callback) {
    var opts;
    opts = _.extend({}, {
      auto_connect: true,
      redisHost: 'localhost',
      redisPort: 6379,
      secure: false
    }, options);
    app.on('started', function() {
      if (!app.hasOwnProperty('ApiHero')) {
        console.log('APIHero not found\ntry running: npm install --save apihero');
        process.exit(1);
      }
      app.ApiHero.proxyEvent('socket-io-init', emitter);
      (io = _io(app.ApiHero.server)).adapter(io_redis({
        host: opts.redisHost,
        port: opts.redisPort
      }));
      io.sockets.on('connect', connectionHandler);
      _.extend(app.ApiHero, {
        io: io
      });
      return emitter.emit('socket-io-init');
    });
    return process.nextTick(callback);
  };
})(this);
