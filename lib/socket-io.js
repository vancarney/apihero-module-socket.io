// Generated by CoffeeScript 1.9.3
var WebSock, connection, io, io_redis;

io_redis = require('socket.io-redis');

io = require('socket.io');

connection = require('./socket-io');

WebSock = {
  Message: require('./models/message'),
  SockData: require('./models/sockdata'),
  StreamCollection: require('./models/stream')
};

module.exports.io = io;

module.exports.io_redis = io_redis;

WebSock.Client = (function() {
  Client.prototype.__streamHandlers = {};

  function Client(__addr, __options) {
    this.__addr = __addr;
    this.__options = __options != null ? __options : {};
    _.extend(this, Backbone.Events);
    this.model = WebSock.SockData;
    if (!((this.__options.auto_connect != null) && this.__options.auto_connect === false)) {
      this.connect();
    }
  }

  Client.prototype.connect = function() {
    this.__conn = new connection(this.__options);
    return this;
  };

  Client.prototype.addStream = function(name, clazz) {
    var s;
    if ((s = this.__streamHandlers[name]) != null) {
      return s;
    }
    this.__streamHandlers[name] = clazz;
    return this;
  };

  Client.prototype.removeStream = function(name) {
    if (this.__streamHandlers[name] == null) {
      return null;
    }
    delete this.__streamHandlers[name];
    return this;
  };

  Client.prototype.getClientId = function() {
    var ref, ref1;
    if (((ref = this.socket) != null ? (ref1 = ref.io) != null ? ref1.engine : void 0 : void 0) == null) {
      return null;
    }
    return this.socket.io.engine.id;
  };

  return Client;

})();

module.exports.WebSock = WebSock;

module.exports.init = (function(_this) {
  return function(app, options, callback) {
    var opts, server;
    opts = _.extend({}, {
      auto_connect: true,
      redisHost: 'localhost',
      redisPort: 6379,
      secure: false
    }, options);
    server = require(opts.secure ? 'https' : 'http').Server(app);
    if (!app.hasOwnProperty('APIHero' && typeof app.APIHero === 'object')) {
      console.log('APIHero not found\ntry running: npm install --save apihero');
      process.exit(1);
    }
    app.APIHero.io = io(server);
    app.APIHero.io.adapter(redis({
      host: opts.redisHost,
      port: opts.redisPort
    }));
    return process.nextTick(callback);
  };
})(this);
