// Generated by CoffeeScript 1.9.3
var Backbone, SockData,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

console.log("window: " + window);

if (!((window.Backbone != null) && (typeof exports !== "undefined" && exports !== null))) {
  Backbone = require('backbone');
}

SockData = (function(superClass) {
  extend(SockData, superClass);

  function SockData() {
    return SockData.__super__.constructor.apply(this, arguments);
  }

  SockData.prototype.header = {};

  SockData.prototype.initialize = function(attributes, options) {
    this.__type = Fun.getConstructorName(this);
    return SockData.__super__.initialize.call(this, attributes, options);
  };

  SockData.prototype.sync = function(mtd, mdl, opt) {
    var base, m;
    if (opt == null) {
      opt = {};
    }
    m = {};
    if (opt.header != null) {
      _.extend(this.header, opt.header);
    }
    if (mtd === 'create') {
      if ((base = this.header).type == null) {
        base.type = this.__type;
      }
      m.header = _.extend(this.header, {
        sntTime: Date.now()
      });
      m.body = mdl.attributes;
      return SockData.__connection__.socket.emit('ws:datagram', m);
    }
  };

  SockData.prototype.getSenderId = function() {
    return this.header.sender_id || null;
  };

  SockData.prototype.getSentTime = function() {
    return this.header.sntTime || null;
  };

  SockData.prototype.getServedTime = function() {
    return this.header.srvTime || null;
  };

  SockData.prototype.getRecievedTime = function() {
    return this.header.rcvTime || null;
  };

  SockData.prototype.getSize = function() {
    return this.header.size || null;
  };

  SockData.prototype.setRoomId = function(id) {
    return this.header.room_id = id;
  };

  SockData.prototype.getRoomId = function() {
    return this.header.room_id;
  };

  SockData.prototype.parse = function(data) {
    this.header = Object.freeze(data.header);
    return SockData.__super__.parse.call(data.body);
  };

  return SockData;

})(Backbone.Model);

module.exports = SockData;
